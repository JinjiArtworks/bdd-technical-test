import {
  require_react
} from "./chunk-JLBVE3FS.js";
import {
  __toESM
} from "./chunk-HUBM7RA2.js";

// node_modules/react-wrap-balancer/dist/index.mjs
var import_react = __toESM(require_react(), 1);
var import_react2 = __toESM(require_react(), 1);
"use client";
var E = typeof window == "undefined";
var m = E ? import_react2.default.useEffect : import_react2.default.useLayoutEffect;
var h = 0;
var b = () => ++h;
var _ = false;
function x() {
  let [n, r] = import_react2.default.useState(_ ? b : void 0);
  return m(() => {
    n === void 0 && r(b()), _ = true;
  }, []), n === void 0 ? n : `rwb-${n.toString(32)}`;
}
function R() {
  return import_react2.default.useMemo(() => "useId" in import_react2.default ? import_react2.default.useId : x, [])();
}
var y = "__wrap_b";
var d = "__wrap_n";
var v = "__wrap_o";
var S = (n, r, e) => {
  e = e || document.querySelector(`[data-br="${n}"]`);
  let t = e.parentElement, c = (f) => e.style.maxWidth = f + "px";
  e.style.maxWidth = "";
  let i = t.clientWidth, s = t.clientHeight, o = i / 2 - 0.25, a = i + 0.5, u;
  if (i) {
    for (c(o), o = Math.max(e.scrollWidth, o); o + 1 < a; )
      u = Math.round((o + a) / 2), c(u), t.clientHeight === s ? a = u : o = u;
    c(a * r + i * (1 - r));
  }
  e.__wrap_o || (typeof ResizeObserver != "undefined" ? (e.__wrap_o = new ResizeObserver(() => {
    self.__wrap_b(0, +e.dataset.brr, e);
  })).observe(t) : console.warn("The browser you are using does not support the ResizeObserver API. Please consider add polyfill for this API to avoid potential layout shifts or upgrade your browser. Read more: https://github.com/shuding/react-wrap-balancer#browser-support-information"));
};
var B = S.toString();
var O = '(self.CSS&&CSS.supports("text-wrap","balance")?1:2)';
var T = (n, r, e = "") => (e && (e = `self.${d}!=1&&${e}`), import_react.default.createElement("script", { suppressHydrationWarning: true, dangerouslySetInnerHTML: { __html: (n ? "" : `self.${d}=self.${d}||${O};self.${y}=${B};`) + e }, nonce: r }));
var g = import_react.default.createContext({ preferNative: true, hasProvider: false });
var $ = ({ preferNative: n = true, nonce: r, children: e }) => {
  let t = import_react.default.useMemo(() => ({ preferNative: n, hasProvider: true }), [n]);
  return import_react.default.createElement(g.Provider, { value: t }, T(false, r), e);
};
var w = ({ ratio: n = 1, preferNative: r, nonce: e, children: t, ...c }) => {
  let i = R(), s = import_react.default.useRef(), o = import_react.default.useContext(g), a = r != null ? r : o.preferNative, u = c.as || "span";
  return m(() => {
    a && self[d] === 1 || s.current && (self[y] = S)(0, n, s.current);
  }, [t, a, n]), m(() => {
    if (!(a && self[d] === 1))
      return () => {
        if (!s.current)
          return;
        let f = s.current[v];
        f && (f.disconnect(), delete s.current[v]);
      };
  }, [a]), t && !Array.isArray(t) && typeof t == "object" && "type" in t && typeof t.type == "string" && t.type !== "span" && console.warn(`<Balancer> should not wrap <${t.type}> inside. Instead, it should directly wrap text or inline nodes.

Try changing this:
  <Balancer><${t.type}>content</${t.type}></Balancer>
To:
  <${t.type}><Balancer>content</Balancer></${t.type}>`), import_react.default.createElement(import_react.default.Fragment, null, import_react.default.createElement(u, { ...c, "data-br": i, "data-brr": n, ref: s, style: { display: "inline-block", verticalAlign: "top", textDecoration: "inherit", textWrap: a ? "balance" : "initial" }, suppressHydrationWarning: true }, t), T(o.hasProvider, e, `self.${y}("${i}",${n})`));
};
if (!E && true) {
  let n = document.querySelector("[data-next-hide-fouc]");
  if (n) {
    let r = (t) => {
      for (let c of t)
        for (let i of Array.from(c.removedNodes)) {
          if (i !== n)
            continue;
          e.disconnect();
          let s = document.querySelectorAll("[data-br]");
          for (let o of Array.from(s))
            self[y](0, +o.dataset.brr, o);
        }
    }, e = new MutationObserver(r);
    e.observe(document.head, { childList: true });
  }
}
var L = w;
export {
  w as Balancer,
  $ as Provider,
  L as default
};
//# sourceMappingURL=react-wrap-balancer.js.map
